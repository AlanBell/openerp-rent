# -*- encoding: utf-8 -*-
#
# OpenERP Rent - A rent module for OpenERP 6
# Copyright (C) 2010-Today Thibaut DIRLIK <thibaut.dirlik@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import datetime
import calendar

from osv import osv, fields
from tools.translate import _
from dateutil.relativedelta import *

DATE_FORMAT = "%Y-%m-%d %H:%M:%S"
UNITIES = (
    ('hour', _('Hour')),
    ('day', _('Day')),
    ('month', _('Month')),
    ('year', _('Year')),
)

def convert_datetimes(*args):

    """
    This function returns a list of datetimes object for each date passed as a string.
    """

    return [datetime.datetime.strptime(arg, DATE_FORMAT) for arg in args]

class Rent(osv.osv):

    """
    Represents the leasing of a product, which is defined by :
     - A begin and an end date.
     - The products which are rented.
     - The partner (client) they are rented to.
     - The invoice generated by this rent.

    Only products that are marked as 'rentable' can be rented.

    We won't do any invoicing here, this module just store informations
    about "who rents what". Look at the rent_invoicing module for invoicing possibility.
    """

    def on_date_changed(self, cursor, user_id, ids, begin_date_str, end_date_str):

        """
        This method is called when the begin or end date changed. We update the duration
        field if both dates are correctly filled.
        """

        result = {
            'value' : { 'duration' : self.default_get(cursor, user_id, ['duration'])['duration'] }
        }

        if not (begin_date_str and end_date_str):
            return result

        begin_date, end_date = convert_datetimes(begin_date_str, end_date_str)

        if not begin_date or not end_date:
            return result

        if begin_date > end_date:
            result['value']['duration'] = _('The end date is before the begin date !')
            return result

        result['value']['duration'] = self._calculate_duration(self, cursor,
            user_id, ids, None, None, begin_date, end_date)

        return result

    def _calculate_duration(self, cursor, user_id, ids, field_name, arg, context=None,
                            begin_date=None, end_date=None):

        """
        This method returns the computed string for the duration.
        """

        def _calc(begin, end):

            # The relativedelta function is part of the module dateutil
            # that is used by OpenERP (http://niemeyer.net/python-dateutil)

            duration = relativedelta(end, begin)
            output = []

            for duration_type in (_('years'), _('months'), _('days'), _('hours')):
                count = getattr(duration, duration_type)
                # TODO: Some languages don't use 's' as plural.
                if count:
                    output.append('%d %s' % (count, duration_type if count > 1 else duration_type[:-1]))

            return ' '.join(output)

        if begin_date or end_date:
            # In this case, the function has been called from on_date_changed method.
            return _calc(begin_date, end_date)
        else:

            rents = self.browse(cursor, user_id, ids, context=context)
            result = {}

            for rent in rents:
                begin_date, end_date = convert_datetimes(rent['begin_date'], rent['end_date'])
                if begin_date and end_date:
                    result[rent.id] = _calc(begin_date, end_date)
                else:
                    result[rent.id] = 'ERROR'

            return result

        return self.default_get(cursor, user_id, ['duration'], context=context)['duration']

    _name = 'rent.rent'
    _sql_constraints = [('rent_date_order', 'CHECK(begin_date < end_date)', 'Begin date must be before the end date.'),]
    _columns = {
        'begin_date' : fields.datetime(_('Rent start'), required=True),
        'end_date' : fields.datetime(_('End of rental'), required=True),
        'line_ids' : fields.one2many('rent.line', 'rent_id', _('Products'), required=True),
        'partner_id' : fields.many2one('res.partner', _('Client'), ondelete='restrict', required=True,
                                       context={'search_default_customer' : 1}),
        'duration' : fields.function(_calculate_duration, type="char", method=True, string="Duration", size=150),
        'upper_round_duration' : fields.boolean(_('Round the duration'))
    }
    _defaults = {
        'duration' : _('Please select the begin/end date.'),
    }

class RentLine(osv.osv):

    """
    This class represents a rented product. The price is determined in function of the
    duration and the specified quantity.
    """

    def _calculate_price(self, cursor, user_id, ids, field_name, arg, context=None):

        """
        Returns the price of a prouct depending on the duration of the rent.
        """

        print context, ids

        if not ids:
            return

        lines = self.browse(cursor, user_id, ids, context=context)
        results = {}

        for line in lines:

            pass
                

        return results

    _name ='rent.line'
    _columns = {
        'rent_id' : fields.many2one('rent.rent', 'Rent'),
        'product_id' : fields.many2one('product.product', 'Product'),
        'quantity' : fields.integer(_('Quantity')),
        'price' : fields.function(_calculate_price, type="float", method=True, string=_('Price for the duration'))
    }
    _defaults = {
        'price' : 0,
    }

Rent(), RentLine()
