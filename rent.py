# -*- encoding: utf-8 -*-
#
# OpenERP Rent - A rent module for OpenERP 6
# Copyright (C) 2010-Today Thibaut DIRLIK <thibaut.dirlik@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import datetime

from osv import osv, fields

class Rent(osv.osv):

    """
    Represents the leasing of a product, which is defined by :
     - A begin and an end date.
     - The products which are rented.
     - The partner (client) they are rented to.
     - The invoice generated by this rent.

    Only products that are marked as 'rentable' can be rented.

    We won't do any invoicing here, this module just store informations
    about "who rents what". Look at the rent_invoicing module for invoicing possibility.
    """

    def on_date_changed(self, cursor, user_id, ids, begin_date, end_date):

        """
        This method is called when the begin or end date changed. We update the duration
        field if both dates are correctly filled.
        """

        format = "%Y-%m-%d %H:%M:%S"
        empty = {}

        if not (begin_date and end_date):
            return empty

        try:
            begin_date = datetime.datetime.strptime(begin_date, format)
            end_date = datetime.datetime.strptime(end_date, format)
        except ValueError:
            print 'Unable to use strptime() with the specified format.'
            return empty

        if begin_date > end_date:
            raise osv.except_osv('Error', 'The begin must be inferior the end date.')

        return {'value' : {
            'duration' : self._calculate_duration(self, cursor,
                            user_id, ids, None, None, begin_date, end_date)
        }}
        
    def _calculate_duration(self, cursor, user_id, ids, field_name, arg, context=None,
                            begin_date=None, end_date=None):

        """
        This method returns the computed string for the duration.
        """

        def _calc(begin, end):
            return str(end - begin)

        if begin_date or end_date:
            return _calc(begin_date, end_date)
        else:
            # The function is not called from a on_change event, we
            # have to get the begin and end date from the DB.
            pass

        return 'None'

    _name = 'rent.rent'

    _sql_constraints = [
        ('rent_date_order', 'CHECK(begin_date < end_date)', 'Begin date must be before the end date.'),
    ]
    
    _columns = {
        'begin_date' : fields.datetime('Rent start', required=True),
        'end_date' : fields.datetime('End of rental', required=True),
        'product_ids' : fields.many2many('product.product', 'rent_products_relation', 'rent_id', 'product_id',
                                         'Products', domain=[('rental', '=', 'True')], required=True),
        'partner_id' : fields.many2one('res.partner', 'Client', ondelete='restrict', required=True,
                                       domain=[('customer', '=', True)]),
        'duration' : fields.function(_calculate_duration, type="char", method=True, string="Duration", size=150),
    }
    
    _defaults = {
        'duration' : 'Please select the begin/end date.',
    }

Rent()
