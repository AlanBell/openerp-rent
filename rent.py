# -*- encoding: utf-8 -*-
#
# OpenERP Rent - A rent module for OpenERP 6
# Copyright (C) 2010-Today Thibaut DIRLIK <thibaut.dirlik@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import datetime
import calendar

from osv import osv, fields
from tools.translate import _
from dateutil.relativedelta import *

DATE_FORMAT = "%Y-%m-%d %H:%M:%S"
UNITIES = (
    ('hour', _('Hour')),
    ('day', _('Day')),
    ('month', _('Month')),
    ('year', _('Year')),
)

def convert_datetimes(*args):

    """
    This function returns a list of datetimes object for each date passed as a string.
    """

    return [datetime.datetime.strptime(arg, DATE_FORMAT) for arg in args]

class Rent(osv.osv):

    """
    Represents the leasing of a product, which is defined by :
     - A begin and an end date.
     - The products which are rented.
     - The partner (client) they are rented to.
     - The invoice generated by this rent.

    Only products that are marked as 'rentable' can be rented.

    We won't do any invoicing here, this module just store informations
    about "who rents what". Look at the rent_invoicing module for invoicing possibility.
    """

    _name = 'rent.rent'
    _sql_constraints = [('rent_date_order', 'CHECK(begin_date < end_date)', 'Begin date must be before the end date.'),]
    _columns = {
        'date' : fields.date(_('Date')),
        'ref' : fields.char(_('Reference')),
        'line_ids' : fields.one2many('rent.line', 'rent_id', _('Products'), required=True),
        'partner_id' : fields.many2one('res.partner', _('Client'), ondelete='restrict', required=True,
                                       context={'search_default_customer' : 1}),
    }
    _defaults = {
        'duration' : _('Please select the begin/end date.'),
    }

class RentLine(osv.osv):

    """
    This class represents a rented product. The price is determined in function of the
    duration and the specified quantity.
    """

    def _calculate_price(self, cursor, user_id, ids, field_name, arg, context=None):

        """
        Returns the price of a prouct depending on the duration of the rent.
        """

        print context, ids

        if not ids:
            return

        lines = self.browse(cursor, user_id, ids, context=context)
        results = {}

        for line in lines:

            pass
        
        return results

    _name ='rent.line'
    _columns = {
        'rent_id' : fields.many2one('rent.rent', 'Rent'),
        'product_id' : fields.many2one('product.product', 'Product'),
        'duration_value' : fields.integer(_('Duration')),
        'duration_unity' : fields.selection(UNITIES, _('Duration unity')),
        'price' : fields.function(_calculate_price, type="float", method=True, string=_('Price for the duration'))
    }
    _defaults = {
        'price' : 0,
    }

Rent(), RentLine()
